#!/usr/bin/node
// vim: syntax=javascript

/*

#############################################################################
Copyright 2015 IoT.bzh
 
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
 
    http://www.apache.org/licenses/LICENSE-2.0
 
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
#############################################################################

Author: Stephane Desneux
Date:   October-2015
Object: List the catalog of images stored in Docker Registry 2.0 server
Version: @VERSION@
Revision: @URL@ @REVISION@

*/


// allow self-signed certs
process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";

var https = require('https');

var SERVER="dockreg";
var PORT=443;

if (process.argv.length>2) {
	SERVER=process.argv[2];
	if (process.argv.length>3) {
		PORT=process.argv[3];
	}
}

function checkAPI() {
	var options = {
		hostname: SERVER,
		port: PORT,
		path: '/v2/',
		method: 'GET'
	};
	var req = https.request(options, function(res) {
		var data='';
		res.on('data', function(d) { data+=d; });
		res.on('end',function() {
			try {
				var obj=JSON.parse(data);
				if (!obj) {
					throw "Invalid API";
					return;
				}
				getCatalog();
			}
			catch(e) {
				process.stderr.write("Server API is not version 2 at https://"+options.hostname+":"+options.port+options.path+"\n"); 
			}
		});
	});
	req.end();
}

function getCatalog() {
	process.stderr.write("Images catalog on Docker registry: "+SERVER+":"+PORT+"\n");
	var options = {
		hostname: SERVER,
		port: PORT,
		path: '/v2/_catalog',
		method: 'GET'
	};

	var req = https.request(options, function(res) {
		var data='';
		res.on('data', function(d) { data+=d; });
		res.on('end',function() {
			try {
				var obj=JSON.parse(data);
				if (!obj.repositories instanceof Array) { 
					throw "Invalid catalog"
					return; 
				}
				obj.repositories.forEach(getRepoDetails);
			}
			catch(e) {
				process.stderr.write("Invalid response for https://"+options.hostname+":"+options.port+options.path+"\n"); 
			}
		});
	});
	req.end();
}

function getRepoDetails(repo) {
	var options = {
		hostname: SERVER,
		port: PORT,
		path: '/v2/'+repo+'/tags/list',
		method: 'GET'
	};

	var req = https.request(options, function(res) {
		var data='';
		res.on('data', function(d) { data+=d; });
		res.on('end',function() {
			try {
				var obj=JSON.parse(data);
				if (!obj.tags instanceof Array) {
					throw "Invalid tag list";
				}
				obj.tags.forEach(function(t) {
					process.stdout.write(options.hostname+":"+options.port+"/"+obj.name+":"+t+"\n");
				});
			}
			catch(e) {
				process.stderr.write("Invalid response for https://"+options.hostname+":"+options.port+options.path+"\n"); 
			}
		});
	});
	req.end();
}

checkAPI();
