#!/bin/bash
###########################################################################
# Copyright 2017 IoT.bzh
#
# author: Nieutin Vincent <vincent.nieutin@iot.bzh>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###########################################################################

################################## Usage ##################################

function usage {
    echo "usage: $(basename "$0") < create | delete > [ --yes | --no | --dry-run ]";
    echo
    echo "    create       -> Create a bridge (linked to the default interface).";
    echo "    delete       -> Delete the bridge (revert your old default interface).";
    echo
    echo "Options:";
    echo "    [-y, --yes]                     -> Answer yes without user interaction.";
    echo "    [-n, --no]                      -> Answer no without user interaction.";
    echo "    [-d, --dry-run]                 -> Don't do anything, only print.";
    echo "    [-h, --help]                    -> Show this usage.";
    echo
    echo "WARNING: Creating this bridge will monopolize your default interface!";
}

###################### Basic vars, traps & functions ######################

set -e
TOOL="\\e[33m$(basename "$0")\\e[0m"

function print { echo -e "$TOOL - $1"; }

function finish {
    exitcode=$?
    [ "$exitcode" != "0" ] && print "ERROR: exit $exitcode"
}
trap finish EXIT

function containsElement () {
    local e match="$1"
    shift
    for e; do [[ "$e" == "$match" ]] && return 0; done
    return 1
}

function verifAutoVar {
    [ -z "${!1}" ] && { print "ERROR: ${1} could not be computed automatically!"; exit 1; }
    print "INFO: ${1}=${!1}"
}

function getResultOf {
    CMD_STR="$1"
    VAR_NAME="$2"
    if eval "$CMD_STR" &>/dev/null; then
        declare -g "$VAR_NAME"="$(eval "$CMD_STR")"
    fi
    verifAutoVar "$VAR_NAME"
}

################################ Functions ################################

function createbridge {
    print "Create bridge"

    ######################## Retrieval of informations ########################

    print "Automatic retrieval of informations."

    # Retrieves the default interface
    getResultOf "ip r | grep default | grep -Eo \"dev [a-z0-9]+\" | cut -d' ' -f2 | head -1" "DEFAULT_INTERFACE"

    # Retrieves the default interface gateway
    getResultOf "ip r | grep default | grep -Eo \"via [0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\" | cut -d' ' -f2" "DEFAULT_GATEWAY"

    # Search for a free bridge interface name
    bridges=($(brctl show | tail -n +2 | tr '\t' ' ' | tr -s ' ' | cut -d' ' -f1))
    i=0
    while containsElement "br$i" "${bridges[@]}"; do ((i++)); done
    NEW_BRIDGE="br$i"
    verifAutoVar "NEW_BRIDGE"

    # Retrieves the default interface inet
    getResultOf "ip a s \"$DEFAULT_INTERFACE\" | grep -Eo \"inet [0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+/[0-9]+\" | cut -d' ' -f2" "DEFAULT_INET"

    ############################## User approval ##############################

    # Requires user approval if it has not set --yes or --no.
    if [ -z "$AUTO_ANSWER" ]; then
        echo "nb: You can automate this step with \"-y\" or \"-n\"."
        while true; do
            read -r -p "Do you want to setup the bridge? yes (y) / no (n) : " yn
            case $yn in
                [Yy]* ) break;;
                [Nn]* ) exit;;
                * ) echo "Please answer yes or no.";;
            esac
        done
    elif ! [ "$AUTO_ANSWER" == "yes" ]; then exit; fi

    ############################## Bridge setup ###############################

    print "Setup $NEW_BRIDGE"

    sudo brctl addbr "$NEW_BRIDGE"
    sudo ip link set "$NEW_BRIDGE" up
    sudo ip addr del "$DEFAULT_INET" dev "$DEFAULT_INTERFACE"; \
    sudo brctl addif "$NEW_BRIDGE" "$DEFAULT_INTERFACE"; \
    sudo ip addr add "$DEFAULT_INET" dev "$NEW_BRIDGE"
    sudo ip route replace default via "$DEFAULT_GATEWAY" dev "$NEW_BRIDGE"

    ############################## Bridge verif ###############################

    print "Verif $NEW_BRIDGE well created"

    # Verif bridge created
    ! ip a s "$NEW_BRIDGE" &>/dev/null && { print "ERROR: Bridge $NEW_BRIDGE not found!"; exit 1; }

    # Verif bridge up
    ! ip a s "$NEW_BRIDGE" | head -1 | grep "UP" &>/dev/null && { print "ERROR: Bridge $NEW_BRIDGE isn't UP!"; exit 1; }

    # Verif old interface inet deleted
    ip a s "$DEFAULT_INTERFACE" | grep "inet " | grep "$DEFAULT_INET" &>/dev/null && { print "ERROR: Interface $DEFAULT_INTERFACE still have $DEFAULT_INET address!"; exit 1; }

    # Verif bridge & interface linking
    ! brctl show "$NEW_BRIDGE" | grep "$DEFAULT_INTERFACE" &>/dev/null && { print "ERROR: Bridge $NEW_BRIDGE does not contain interface $DEFAULT_INTERFACE !"; exit 1; }

    # Verif bridge inet
    ! ip a s "$NEW_BRIDGE" | grep "inet " | grep "$DEFAULT_INET" &>/dev/null && { print "ERROR: Bridge $NEW_BRIDGE does not have the new $DEFAULT_INET address!"; exit 1; }

    # Verif default route changed (From $DEFAULT_INTERFACE to $NEW_BRIDGE interface)
    ip r | grep default | grep "$DEFAULT_INTERFACE" &>/dev/null && { print "ERROR: Default route still have $DEFAULT_INTERFACE interface!"; exit 1; }
    ! ip r | grep default | grep "$NEW_BRIDGE" &>/dev/null && { print "ERROR: Default route does not have $NEW_BRIDGE interface!"; exit 1; }

    print "Bridge $NEW_BRIDGE has been well created!"
}


function deletebridge {
    print "Delete bridge"

    ######################## Retrieval of informations ########################

    print "Automatic retrieval of informations."

    # Retrieves the default interface
    getResultOf "ip r | grep default | grep -Eo \"dev [a-z0-9]+\" | cut -d' ' -f2 | head -1" "DEFAULT_INTERFACE"
    # Verif default interface is a bridge
    echo "$DEFAULT_INTERFACE" | grep -Eo "br[0-9]+" &>/dev/null || { print "ERROR: Default interface $DEFAULT_INTERFACE is not a bridge!"; exit 1; }

    # Retrieves the default interface gateway
    getResultOf "ip r | grep default | grep $DEFAULT_INTERFACE | grep -Eo \"via [0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\" | cut -d' ' -f2" "DEFAULT_GATEWAY"

    # Retrieves the default interface inet
    getResultOf "ip a s \"$DEFAULT_INTERFACE\" | grep -Eo \"inet [0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+/[0-9]+\" | cut -d' ' -f2" "DEFAULT_INET"
    # Retrieve old interface name
    getResultOf "bridge link | grep \"$DEFAULT_INTERFACE\" | cut -d' ' -f2 | grep -Fo $(basename $(readlink -f /sys/class/net/* | grep -v virtual))" "REAL_INTERFACE"
    ## bridge link | grep "$DEFAULT_INTERFACE" | cut -d' ' -f2 # Bridge interfaces list
    ## basename "$(readlink -f /sys/class/net/* | grep -v virtual)" # Real physical interfaces
    # Verif REAL & DEFAULT interfaces are different
    [ "$DEFAULT_INTERFACE" != "$REAL_INTERFACE" ] || { print "ERROR: Default bridge interface ($DEFAULT_INTERFACE) and the real physical interface ($REAL_INTERFACE) are identical!"; exit 1; }

    ############################## User approval ##############################

    # Requires user approval if it has not set --yes or --no.
    if [ -z "$AUTO_ANSWER" ]; then
        echo "nb: You can automate this step with \"-y\" or \"-n\"."
        while true; do
            read -r -p "Do you want to revert the bridge? yes (y) / no (n) : " yn
            case $yn in
                [Yy]* ) break;;
                [Nn]* ) exit;;
                * ) echo "Please answer yes or no.";;
            esac
        done
    elif ! [ "$AUTO_ANSWER" == "yes" ]; then exit; fi

    ############################## Revert bridge ##############################

    print "Revert $DEFAULT_INTERFACE"

    sudo ip link set "$DEFAULT_INTERFACE" down; \
    sudo brctl delbr "$DEFAULT_INTERFACE"; \
    sudo ip addr add "$DEFAULT_INET" dev "$REAL_INTERFACE"; \
    sudo ip route replace default via "$DEFAULT_GATEWAY" dev "$REAL_INTERFACE"

    OLD_BRIDGE="$DEFAULT_INTERFACE"

    ############################## Revert verif ###############################

    print "Verif $OLD_BRIDGE reverted"

    # Verif bridge deleted
    ip a s "$OLD_BRIDGE" &>/dev/null && { print "ERROR: Bridge $OLD_BRIDGE still exists!"; exit 1; }

    # Verif interface inet
    ! ip a s "$REAL_INTERFACE" | grep "inet " | grep "$DEFAULT_INET" &>/dev/null && { print "ERROR: Interface $REAL_INTERFACE does not have the new $DEFAULT_INET address!"; exit 1; }

    # Verif interface up
    ! ip a s "$REAL_INTERFACE" | head -1 | grep "UP" &>/dev/null && { print "ERROR: Interface $REAL_INTERFACE isn't UP!"; exit 1; }

    # Verif default route
    ! ip r | grep default | grep "$REAL_INTERFACE" &>/dev/null && { print "ERROR: Default route does not have $REAL_INTERFACE interface!"; exit 1; }

    print "Bridge $OLD_BRIDGE has been well reverted!"
}

########################### Capture parameters ############################

while [ $# -ne 0 ]; do
    case $1 in
        -h|--help|"")
            usage; exit
        ;;
        create)
            OPERATION="create"
        ;;
        delete)
            OPERATION="delete"
        ;;
        -y|--yes)
            AUTO_ANSWER="yes"
        ;;
        -n|--no|-d|--dry-run)
            AUTO_ANSWER="no"
        ;;
        *)
            echo "hmm hmm, $1 ?"
        ;;
    esac
    shift
done

############################# Read parameters #############################

if [ "$OPERATION" == "create" ]; then
    createbridge; exit 0
elif [ "$OPERATION" == "delete" ]; then
    deletebridge; exit 0
fi

usage; exit 1
